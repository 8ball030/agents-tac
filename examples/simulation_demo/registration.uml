@startuml

participant "Controller"
participant "OEF Node"
participant "Baseline 1"
participant "Baseline 2"
participant "Baseline 3"

note over "OEF Node"
    For the sake of brevity,
    assume that messages sent between agents
    are in fact sent through the OEF.
end note

"Controller"->"OEF Node": register_service("tac")
"Controller"->"Controller": run()
activate "Controller"

"Baseline 1" -> "OEF Node": search_services("tac")
"Baseline 2" -> "OEF Node": search_services("tac")
"Baseline 3" -> "OEF Node": search_services("tac")

"OEF Node" -> "Baseline 1": search result: ["Controller"]
"OEF Node" -> "Baseline 2": search result: ["Controller"]
"OEF Node" -> "Baseline 3": search result: ["Controller"]

"Baseline 1" -> "Controller": Register()
"Baseline 2" -> "Controller": Register()
"Baseline 3" -> "Controller": Register()

note over "Controller"
    When at least N TAC agents
    will be registered for the competition,
    Generate a Game instance and send
    details to the participants.
end note

"Controller" -> "Baseline 1": GameData(money, endowments, preferences, scores, fee)
"Controller" -> "Baseline 2": GameData(money, endowments, preferences, scores, fee)
"Controller" -> "Baseline 3": GameData(money, endowments, preferences, scores, fee)

note over "Baseline 1", "Baseline 3"
        Each participant registers
        as "tac_seller" on the Service Directory,
        providing the quantity of good
        that want to sell, for every good.
end note

"Baseline 1" -> "OEF Node": register_service("tac_seller", {"good_01": 1, ...})
"Baseline 2" -> "OEF Node": register_service("tac_seller", ...)
"Baseline 3" -> "OEF Node": register_service("tac_seller", ...)

note over "Baseline 1", "Baseline 3"
        Each participant query the OEF
        for sellers that offer the
        goods that he need.
end note

"Baseline 1" -> "OEF Node": search_service("tac_seller", Query("good_01" >= 1 OR "good_04" >= 1 OR ...)
"Baseline 2" -> "OEF Node": search_service("tac_seller", ...)
"Baseline 3" -> "OEF Node": search_service("tac_seller", ...)

@enduml
